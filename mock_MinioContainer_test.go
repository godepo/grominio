// Code generated by mockery v2.53.3. DO NOT EDIT.

package grominio

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testcontainers "github.com/testcontainers/testcontainers-go"
)

// MockMinioContainer is an autogenerated mock type for the MinioContainer type
type MockMinioContainer struct {
	mock.Mock
}

type MockMinioContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMinioContainer) EXPECT() *MockMinioContainer_Expecter {
	return &MockMinioContainer_Expecter{mock: &_m.Mock}
}

// ConnectionString provides a mock function with given fields: ctx
func (_m *MockMinioContainer) ConnectionString(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConnectionString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMinioContainer_ConnectionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionString'
type MockMinioContainer_ConnectionString_Call struct {
	*mock.Call
}

// ConnectionString is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMinioContainer_Expecter) ConnectionString(ctx interface{}) *MockMinioContainer_ConnectionString_Call {
	return &MockMinioContainer_ConnectionString_Call{Call: _e.mock.On("ConnectionString", ctx)}
}

func (_c *MockMinioContainer_ConnectionString_Call) Run(run func(ctx context.Context)) *MockMinioContainer_ConnectionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMinioContainer_ConnectionString_Call) Return(_a0 string, _a1 error) *MockMinioContainer_ConnectionString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMinioContainer_ConnectionString_Call) RunAndReturn(run func(context.Context) (string, error)) *MockMinioContainer_ConnectionString_Call {
	_c.Call.Return(run)
	return _c
}

// Password provides a mock function with no fields
func (_m *MockMinioContainer) Password() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Password")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMinioContainer_Password_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Password'
type MockMinioContainer_Password_Call struct {
	*mock.Call
}

// Password is a helper method to define mock.On call
func (_e *MockMinioContainer_Expecter) Password() *MockMinioContainer_Password_Call {
	return &MockMinioContainer_Password_Call{Call: _e.mock.On("Password")}
}

func (_c *MockMinioContainer_Password_Call) Run(run func()) *MockMinioContainer_Password_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMinioContainer_Password_Call) Return(_a0 string) *MockMinioContainer_Password_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMinioContainer_Password_Call) RunAndReturn(run func() string) *MockMinioContainer_Password_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function with given fields: ctx, opts
func (_m *MockMinioContainer) Terminate(ctx context.Context, opts ...testcontainers.TerminateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...testcontainers.TerminateOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMinioContainer_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MockMinioContainer_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...testcontainers.TerminateOption
func (_e *MockMinioContainer_Expecter) Terminate(ctx interface{}, opts ...interface{}) *MockMinioContainer_Terminate_Call {
	return &MockMinioContainer_Terminate_Call{Call: _e.mock.On("Terminate",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockMinioContainer_Terminate_Call) Run(run func(ctx context.Context, opts ...testcontainers.TerminateOption)) *MockMinioContainer_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]testcontainers.TerminateOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(testcontainers.TerminateOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockMinioContainer_Terminate_Call) Return(_a0 error) *MockMinioContainer_Terminate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMinioContainer_Terminate_Call) RunAndReturn(run func(context.Context, ...testcontainers.TerminateOption) error) *MockMinioContainer_Terminate_Call {
	_c.Call.Return(run)
	return _c
}

// UserName provides a mock function with no fields
func (_m *MockMinioContainer) UserName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMinioContainer_UserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserName'
type MockMinioContainer_UserName_Call struct {
	*mock.Call
}

// UserName is a helper method to define mock.On call
func (_e *MockMinioContainer_Expecter) UserName() *MockMinioContainer_UserName_Call {
	return &MockMinioContainer_UserName_Call{Call: _e.mock.On("UserName")}
}

func (_c *MockMinioContainer_UserName_Call) Run(run func()) *MockMinioContainer_UserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMinioContainer_UserName_Call) Return(_a0 string) *MockMinioContainer_UserName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMinioContainer_UserName_Call) RunAndReturn(run func() string) *MockMinioContainer_UserName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMinioContainer creates a new instance of MockMinioContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMinioContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMinioContainer {
	mock := &MockMinioContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
